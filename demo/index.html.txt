import React, { useState, useEffect, useRef } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Cell } from 'recharts';

const ExoplanetHunter = () => {
  const [prompt, setPrompt] = useState('');
  const [isRunning, setIsRunning] = useState(false);
  const [logs, setLogs] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const consoleRef = useRef(null);

  useEffect(() => {
    if (consoleRef.current) {
      consoleRef.current.scrollTop = consoleRef.current.scrollHeight;
    }
  }, [logs]);

  const startAgent = () => {
    if (!prompt.trim()) {
      alert('Por favor ingresa un prompt');
      return;
    }

    if (isRunning) return;

    setIsRunning(true);
    setLogs([]);
    setShowResults(false);

    const steps = [
      { type: 'thinking', icon: 'üí≠', content: `Analizando el prompt: "${prompt}"` },
      { type: 'thinking', icon: 'üí≠', content: 'Identificando componentes clave del modelo solicitado...' },
      { type: 'action', icon: '‚ö°', content: 'Dise√±ando arquitectura del autoencoder' },
      { type: 'tool', icon: 'üîß', content: 'Herramienta: dataset_loader - Cargando datasets de tr√°nsito de luz' },
      { type: 'thinking', icon: 'üí≠', content: 'Configurando capas de encoder y decoder para detecci√≥n de anomal√≠as' },
      { type: 'tool', icon: 'üîß', content: 'Herramienta: model_builder - Creando estructura del modelo' },
      { type: 'action', icon: '‚ö°', content: 'Compilando modelo con optimizador Adam y funci√≥n de p√©rdida MSE' },
      { type: 'tool', icon: 'üîß', content: 'Herramienta: training_pipeline - Configurando entrenamiento' },
      { type: 'thinking', icon: 'üí≠', content: 'Estableciendo m√©tricas de evaluaci√≥n para detecci√≥n de anomal√≠as' },
      { type: 'success', icon: '‚úì', content: 'Modelo creado exitosamente y listo para entrenamiento' }
    ];

    let delay = 0;
    steps.forEach((step, index) => {
      setTimeout(() => {
        const now = new Date();
        setLogs(prev => [...prev, {
          ...step,
          timestamp: now.toLocaleTimeString('es-ES', { hour12: false })
        }]);

        if (index === steps.length - 1) {
          setIsRunning(false);
          setTimeout(() => setShowResults(true), 500);
        }
      }, delay);
      delay += 1500;
    });
  };

  const clearLog = () => {
    setLogs([]);
    setShowResults(false);
  };

  const exportResults = () => {
    if (logs.length === 0) {
      alert('No hay resultados para exportar');
      return;
    }

    const exportData = {
      prompt: prompt,
      timestamp: new Date().toISOString(),
      metrics: {
        accuracy: 94.7,
        precision: 91.3,
        recall: 89.8,
        f1_score: 90.5
      },
      trainingHistory: trainingData,
      logs: logs
    };

    const jsonStr = JSON.stringify(exportData, null, 2);
    const blob = new Blob([jsonStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `exoplanet-model-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getLogColorClass = (type) => {
    const colors = {
      thinking: '#81d4fa',
      action: '#ce93d8',
      tool: '#80cbc4',
      success: '#81c784',
      error: '#e57373'
    };
    return colors[type] || '#81d4fa';
  };

  // Datos para gr√°ficos
  const trainingData = [
    { epoch: 0, loss: 0.85, val_loss: 0.87, accuracy: 0.65, val_accuracy: 0.63 },
    { epoch: 20, loss: 0.52, val_loss: 0.55, accuracy: 0.78, val_accuracy: 0.76 },
    { epoch: 40, loss: 0.32, val_loss: 0.36, accuracy: 0.85, val_accuracy: 0.83 },
    { epoch: 60, loss: 0.21, val_loss: 0.25, accuracy: 0.89, val_accuracy: 0.87 },
    { epoch: 80, loss: 0.15, val_loss: 0.19, accuracy: 0.92, val_accuracy: 0.90 },
    { epoch: 100, loss: 0.11, val_loss: 0.15, accuracy: 0.94, val_accuracy: 0.92 },
    { epoch: 120, loss: 0.08, val_loss: 0.13, accuracy: 0.95, val_accuracy: 0.93 },
    { epoch: 140, loss: 0.06, val_loss: 0.11, accuracy: 0.96, val_accuracy: 0.94 },
    { epoch: 150, loss: 0.053, val_loss: 0.105, accuracy: 0.967, val_accuracy: 0.947 }
  ];

  const metricsData = [
    { metric: 'Accuracy', value: 94.7, color: '#43a047' },
    { metric: 'Precision', value: 91.3, color: '#1565c0' },
    { metric: 'Recall', value: 89.8, color: '#5e35b1' },
    { metric: 'F1-Score', value: 90.5, color: '#00897b' }
  ];

  const radarData = [
    { metric: 'Accuracy', value: 94.7, fullMark: 100 },
    { metric: 'Precision', value: 91.3, fullMark: 100 },
    { metric: 'Recall', value: 89.8, fullMark: 100 },
    { metric: 'F1-Score', value: 90.5, fullMark: 100 },
    { metric: 'Robustez', value: 88.2, fullMark: 100 }
  ];

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%)',
      padding: '20px'
    }}>
      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>
        {/* Header */}
        <header style={{ textAlign: 'center', marginBottom: '40px', paddingTop: '30px' }}>
          <h1 style={{ 
            fontSize: '2.5rem', 
            fontWeight: '300', 
            color: '#1565c0', 
            marginBottom: '10px',
            letterSpacing: '1px'
          }}>
            ü™ê Exoplanet Hunter
          </h1>
          <p style={{ color: '#5e35b1', fontSize: '1.1rem', opacity: 0.8 }}>
            Crea modelos para cazar exoplanetas
          </p>
        </header>

        {/* Input Section */}
        <div style={{ 
          background: 'white', 
          borderRadius: '15px', 
          boxShadow: '0 4px 6px rgba(0,0,0,0.07)', 
          padding: '30px',
          marginBottom: '30px'
        }}>
          <label style={{ 
            display: 'block', 
            fontSize: '1.1rem', 
            color: '#424242', 
            marginBottom: '15px',
            fontWeight: '500'
          }}>
            Describe el modelo que quieres crear
          </label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            style={{
              width: '100%',
              padding: '15px',
              fontSize: '1rem',
              border: '2px solid #e0e0e0',
              borderRadius: '10px',
              resize: 'vertical',
              minHeight: '100px',
              fontFamily: 'inherit'
            }}
            placeholder="Ej: Crea un autoencoder que detecte anomal√≠as en datasets de rayos de luz"
          />
          <div style={{ display: 'flex', gap: '10px', marginTop: '20px', flexWrap: 'wrap' }}>
            <button
              onClick={startAgent}
              disabled={isRunning}
              style={{
                background: isRunning ? '#ccc' : 'linear-gradient(135deg, #1565c0 0%, #5e35b1 100%)',
                color: 'white',
                border: 'none',
                padding: '15px 40px',
                fontSize: '1.1rem',
                borderRadius: '10px',
                cursor: isRunning ? 'not-allowed' : 'pointer',
                fontWeight: '500',
                opacity: isRunning ? 0.5 : 1
              }}
            >
              Crear Modelo
            </button>
            <button
              onClick={clearLog}
              style={{
                background: '#f5f5f5',
                color: '#666',
                border: '2px solid #e0e0e0',
                padding: '15px 30px',
                fontSize: '1rem',
                borderRadius: '10px',
                cursor: 'pointer',
                fontWeight: '500'
              }}
            >
              Limpiar Consola
            </button>
            <button
              onClick={exportResults}
              disabled={logs.length === 0}
              style={{
                background: '#f5f5f5',
                color: '#666',
                border: '2px solid #e0e0e0',
                padding: '15px 30px',
                fontSize: '1rem',
                borderRadius: '10px',
                cursor: logs.length === 0 ? 'not-allowed' : 'pointer',
                fontWeight: '500',
                opacity: logs.length === 0 ? 0.5 : 1
              }}
            >
              Exportar Resultados
            </button>
          </div>
        </div>

        {/* Console */}
        <div style={{ 
          background: '#1e1e1e', 
          borderRadius: '15px', 
          boxShadow: '0 8px 16px rgba(0,0,0,0.2)',
          overflow: 'hidden',
          marginBottom: '30px'
        }}>
          <div style={{ 
            background: '#2d2d2d', 
            padding: '12px 20px', 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'space-between',
            borderBottom: '1px solid #3d3d3d'
          }}>
            <div style={{ display: 'flex', gap: '8px' }}>
              <div style={{ width: '12px', height: '12px', borderRadius: '50%', background: '#ff5f56' }}></div>
              <div style={{ width: '12px', height: '12px', borderRadius: '50%', background: '#ffbd2e' }}></div>
              <div style={{ width: '12px', height: '12px', borderRadius: '50%', background: '#27c93f' }}></div>
            </div>
            <div style={{ color: '#e0e0e0', fontSize: '0.9rem', fontWeight: '500', display: 'flex', alignItems: 'center', gap: '10px' }}>
              Terminal de Agente
              {isRunning && (
                <span style={{ 
                  display: 'inline-flex', 
                  alignItems: 'center', 
                  gap: '6px', 
                  padding: '4px 12px',
                  background: '#3d3d3d',
                  borderRadius: '12px',
                  fontSize: '0.85rem',
                  color: '#8ab4f8'
                }}>
                  <span style={{ 
                    width: '6px', 
                    height: '6px', 
                    background: '#8ab4f8', 
                    borderRadius: '50%',
                    animation: 'pulse 1.5s infinite'
                  }}></span>
                  Procesando
                </span>
              )}
            </div>
          </div>
          <div
            ref={consoleRef}
            style={{
              padding: '20px',
              minHeight: '400px',
              maxHeight: '600px',
              overflowY: 'auto',
              fontFamily: 'Consolas, Monaco, Courier New, monospace',
              fontSize: '0.9rem',
              lineHeight: '1.6'
            }}
          >
            {logs.length === 0 ? (
              <div style={{ textAlign: 'center', padding: '60px 20px', color: '#666' }}>
                <div style={{ fontSize: '3rem', marginBottom: '15px', opacity: 0.3 }}>‚¨¢</div>
                <p>Sistema en espera...</p>
                <p style={{ fontSize: '0.85rem', marginTop: '8px', opacity: 0.7 }}>
                  Ingresa un prompt para iniciar el agente
                </p>
              </div>
            ) : (
              logs.map((log, index) => (
                <div 
                  key={index} 
                  style={{ 
                    display: 'flex', 
                    gap: '10px', 
                    marginBottom: '8px',
                    color: getLogColorClass(log.type)
                  }}
                >
                  <span style={{ color: '#666', fontSize: '0.85rem' }}>[{log.timestamp}]</span>
                  <span style={{ fontWeight: 'bold' }}>{log.icon}</span>
                  <span style={{ flex: 1 }}>{log.content}</span>
                </div>
              ))
            )}
          </div>
        </div>

        {/* Results Section */}
        {showResults && (
          <div>
            {/* Metrics Cards */}
            <div style={{ 
              background: 'white', 
              borderRadius: '15px', 
              boxShadow: '0 4px 6px rgba(0,0,0,0.07)',
              overflow: 'hidden',
              marginBottom: '30px'
            }}>
              <div style={{ 
                background: 'linear-gradient(135deg, #1565c0 0%, #5e35b1 100%)', 
                color: 'white', 
                padding: '20px 30px'
              }}>
                <h2 style={{ fontSize: '1.5rem', fontWeight: '500', margin: 0 }}>üìä Resultados del Modelo</h2>
              </div>
              <div style={{ padding: '30px' }}>
                {/* Metric Cards Grid */}
                <div style={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
                  gap: '20px',
                  marginBottom: '30px'
                }}>
                  {[
                    { label: 'Accuracy', value: '94.7%', desc: 'Precisi√≥n general', color: '#43a047' },
                    { label: 'Precision', value: '91.3%', desc: 'Detecci√≥n positiva', color: '#1565c0' },
                    { label: 'Recall', value: '89.8%', desc: 'Verdaderos positivos', color: '#5e35b1' },
                    { label: 'F1-Score', value: '90.5%', desc: 'Media arm√≥nica', color: '#00897b' }
                  ].map((metric, index) => (
                    <div
                      key={index}
                      style={{
                        background: '#f8f9fa',
                        borderRadius: '12px',
                        padding: '20px',
                        borderLeft: `4px solid ${metric.color}`
                      }}
                    >
                      <div style={{ 
                        fontSize: '0.9rem', 
                        color: '#666', 
                        marginBottom: '8px',
                        textTransform: 'uppercase',
                        letterSpacing: '0.5px',
                        fontWeight: '600'
                      }}>
                        {metric.label}
                      </div>
                      <div style={{ 
                        fontSize: '2rem', 
                        fontWeight: '700', 
                        color: metric.color,
                        marginBottom: '5px'
                      }}>
                        {metric.value}
                      </div>
                      <div style={{ fontSize: '0.85rem', color: '#888' }}>
                        {metric.desc}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Charts Grid */}
                <div style={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(500px, 1fr))',
                  gap: '24px',
                  marginBottom: '30px'
                }}>
                  {/* Training History Chart */}
                  <div style={{ background: '#f8f9fa', borderRadius: '12px', padding: '20px' }}>
                    <h3 style={{ fontSize: '1.1rem', fontWeight: '600', color: '#424242', marginBottom: '15px' }}>
                      üìà Historial de Entrenamiento
                    </h3>
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={trainingData}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                        <XAxis dataKey="epoch" stroke="#666" />
                        <YAxis stroke="#666" />
                        <Tooltip contentStyle={{ background: '#fff', border: '1px solid #ddd', borderRadius: '8px' }} />
                        <Legend />
                        <Line type="monotone" dataKey="accuracy" stroke="#43a047" strokeWidth={3} name="Accuracy" dot={{ r: 4 }} />
                        <Line type="monotone" dataKey="val_accuracy" stroke="#1565c0" strokeWidth={3} name="Val Accuracy" dot={{ r: 4 }} />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>

                  {/* Loss Chart */}
                  <div style={{ background: '#f8f9fa', borderRadius: '12px', padding: '20px' }}>
                    <h3 style={{ fontSize: '1.1rem', fontWeight: '600', color: '#424242', marginBottom: '15px' }}>
                      üìâ Evoluci√≥n del Loss
                    </h3>
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={trainingData}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                        <XAxis dataKey="epoch" stroke="#666" />
                        <YAxis stroke="#666" />
                        <Tooltip contentStyle={{ background: '#fff', border: '1px solid #ddd', borderRadius: '8px' }} />
                        <Legend />
                        <Line type="monotone" dataKey="loss" stroke="#e53935" strokeWidth={3} name="Training Loss" dot={{ r: 4 }} />
                        <Line type="monotone" dataKey="val_loss" stroke="#fb8c00" strokeWidth={3} name="Validation Loss" dot={{ r: 4 }} />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>

                  {/* Metrics Bar Chart */}
                  <div style={{ background: '#f8f9fa', borderRadius: '12px', padding: '20px' }}>
                    <h3 style={{ fontSize: '1.1rem', fontWeight: '600', color: '#424242', marginBottom: '15px' }}>
                      üìä Comparaci√≥n de M√©tricas
                    </h3>
                    <ResponsiveContainer width="100%" height={300}>
                      <BarChart data={metricsData}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                        <XAxis dataKey="metric" stroke="#666" />
                        <YAxis stroke="#666" domain={[0, 100]} />
                        <Tooltip contentStyle={{ background: '#fff', border: '1px solid #ddd', borderRadius: '8px' }} />
                        <Bar dataKey="value" radius={[8, 8, 0, 0]}>
                          {metricsData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Bar>
                      </BarChart>
                    </ResponsiveContainer>
                  </div>

                  {/* Radar Chart */}
                  <div style={{ background: '#f8f9fa', borderRadius: '12px', padding: '20px' }}>
                    <h3 style={{ fontSize: '1.1rem', fontWeight: '600', color: '#424242', marginBottom: '15px' }}>
                      üéØ An√°lisis Multidimensional
                    </h3>
                    <ResponsiveContainer width="100%" height={300}>
                      <RadarChart data={radarData}>
                        <PolarGrid stroke="#ddd" />
                        <PolarAngleAxis dataKey="metric" stroke="#666" />
                        <PolarRadiusAxis angle={90} domain={[0, 100]} stroke="#666" />
                        <Radar name="Rendimiento" dataKey="value" stroke="#5e35b1" fill="#5e35b1" fillOpacity={0.6} />
                        <Tooltip contentStyle={{ background: '#fff', border: '1px solid #ddd', borderRadius: '8px' }} />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                </div>

                {/* Additional Details */}
                <div style={{ background: '#f8f9fa', borderRadius: '12px', padding: '20px' }}>
                  <h3 style={{ fontSize: '1.1rem', fontWeight: '600', color: '#424242', marginBottom: '15px' }}>
                    üìã Detalles Adicionales
                  </h3>
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '15px' }}>
                    {[
                      { label: '√âpocas completadas', value: '150/150' },
                      { label: 'Tama√±o del dataset', value: '45,230 muestras' },
                      { label: 'Batch size', value: '32' },
                      { label: 'Learning rate', value: '0.001' },
                      { label: 'Optimizador', value: 'Adam' },
                      { label: 'Arquitectura', value: 'Autoencoder (256-128-64-128-256)' },
                      { label: 'Tiempo de entrenamiento', value: '23.4 minutos' },
                      { label: 'Loss final', value: '0.0532' }
                    ].map((detail, index) => (
                      <div 
                        key={index} 
                        style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          padding: '12px 0',
                          borderBottom: '1px solid #e0e0e0'
                        }}
                      >
                        <span style={{ color: '#666', fontWeight: '500' }}>{detail.label}:</span>
                        <span style={{ color: '#424242', fontWeight: '600' }}>{detail.value}</span>
                      </div>
                    ))}
                  </div>

                  {/* Confidence Progress Bar */}
                  <div style={{ marginTop: '20px' }}>
                    <div style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between', 
                      fontSize: '0.9rem', 
                      color: '#666',
                      marginBottom: '8px'
                    }}>
                      <span>Confianza del modelo</span>
                      <span style={{ fontWeight: 'bold' }}>94.7%</span>
                    </div>
                    <div style={{ 
                      width: '100%', 
                      height: '8px', 
                      background: '#e0e0e0', 
                      borderRadius: '4px',
                      overflow: 'hidden'
                    }}>
                      <div
                        style={{
                          height: '100%',
                          width: '94.7%',
                          background: 'linear-gradient(90deg, #1565c0, #5e35b1)',
                          borderRadius: '4px',
                          transition: 'width 1s ease-out'
                        }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExoplanetHunter;